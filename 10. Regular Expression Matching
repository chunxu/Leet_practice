
# Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

# '.' Matches any single character.​​​​
# '*' Matches zero or more of the preceding element.
# The matching should cover the entire input string (not partial).

 

# Example 1:

# Input: s = "aa", p = "a"
# Output: false
# Explanation: "a" does not match the entire string "aa".
# Example 2:

# Input: s = "aa", p = "a*"
# Output: true
# Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
# Example 3:

# Input: s = "ab", p = ".*"
# Output: true
# Explanation: ".*" means "zero or more (*) of any character (.)".
 

# Constraints:

# 1 <= s.length <= 20
# 1 <= p.length <= 20
# s contains only lowercase English letters.
# p contains only lowercase English letters, '.', and '*'.
# It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.

#solution
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        m, n = len(s), len(p)
        dp = [[False] * (n+1) for _ in range(m+1)]
        dp[0][0] = True
        for j in range(2, n+1):
            if p[j-1] == "*":
                dp[0][j] = dp[0][j-2]
        for i in range(1, m+1):
            for j in range(1, n+1):
                if p[j-1] != "*":
                    if s[i-1] == p[j-1] or p[j-1] == ".":
                        dp[i][j] = dp[i-1][j-1]
                else:
                    if s[i-1] == p[j-2] or p[j-2] == ".":
                        dp[i][j] = dp[i-1][j] or dp[i][j-2]
                    else:
                        dp[i][j] = dp[i][j-2]
        return dp[m][n]

# To implement regular expression matching with support for '.' and '*', we can use dynamic programming approach.

# Let dp[i][j] be a boolean value that represents if s[0:i] and p[0:j] match.

# We can define the recursive formula as follows:

# If p[j-1] != "*" and (s[i-1] == p[j-1] or p[j-1] == "."), then
# dp[i][j] = dp[i-1][j-1]

# If p[j-1] == "*", then either it matches zero preceding characters or it matches one or more preceding characters.

# dp[i][j] = dp[i][j-2] or dp[i-1][j] if s[i-1] == p[j-2] or p[j-2] == "."

# We need to handle the base cases as well:

# dp[0][0] = true, s and p are both empty
# dp[i][0] = false, p is empty and s is not
# dp[0][j] = dp[0][j-2] if p[j-1] == "*", p only matches empty string


