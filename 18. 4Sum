# Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

# 0 <= a, b, c, d < n
# a, b, c, and d are distinct.
# nums[a] + nums[b] + nums[c] + nums[d] == target
# You may return the answer in any order.

#solution

class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        nums.sort()  # Sort the array in ascending order
        result = []
        n = len(nums)

        for a in range(n - 3):
            # Skip duplicates for a
            if a > 0 and nums[a] == nums[a - 1]:
                continue

            for b in range(a + 1, n - 2):
                # Skip duplicates for b
                if b > a + 1 and nums[b] == nums[b - 1]:
                    continue

                # Two-pointers for c and d
                c = b + 1
                d = n - 1

                while c < d:
                    curr_sum = nums[a] + nums[b] + nums[c] + nums[d]

                    if curr_sum == target:
                        result.append([nums[a], nums[b], nums[c], nums[d]])

                        # Skip duplicates for c and d
                        while c < d and nums[c] == nums[c + 1]:
                            c += 1
                        while c < d and nums[d] == nums[d - 1]:
                            d -= 1

                        c += 1
                        d -= 1
                    elif curr_sum < target:
                        c += 1
                    else:
                        d -= 1

        return result

