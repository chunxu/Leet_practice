# description
# Given an integer x, return true if x is a palindrome, and false otherwise.


# Example 1:

# Input: x = 121
# Output: true
# Explanation: 121 reads as 121 from left to right and from right to left.
# Example 2:

# Input: x = -121
# Output: false
# Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

# solution
class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x < 0: # Negative numbers are not palindromes
            return False

        # Convert integer to string and compare with its reverse
        str_x = str(x)
        return str_x == str_x[::-1]
 
 
# This implementation first checks if the input integer x is negative. Negative numbers cannot be palindromes because their reversal has a minus sign, so the function immediately returns False in this case.

# For non-negative integers, the implementation converts the integer to a string using the str function. It then compares the string with its reverse, which is obtained using the [::-1] slice notation. If the two strings are equal, then the integer is a palindrome, and the function returns True. Otherwise, the integer is not a palindrome, and the function returns False.

# Note that this implementation assumes that the input integer x fits within the range of a 32-bit integer.
